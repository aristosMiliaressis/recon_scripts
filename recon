#!/bin/bash

subs_only=0

usage() {
        echo -e "Usage: ./recon -d domain.com [-s]\nOptions:\n  -s\t:\tonly scan for subdomains\n " 1>&2; exit 1;
}

while getopts d:s o
do
    case "$o" in
        d) domain=${OPTARG};;
        s) subs_only=1;;
        *) usage;;
    esac
done
shift $((OPTIND - 1))

if [ -z "${domain}" ]; then
echo HERE
   usage;
   exit 1;
fi

sort_and_uniq() {
        cat $1 | sort | uniq > temp.txt
        cat temp.txt > $1
        rm temp.txt
}

DNS_RESOLVERS_FILE=/opt/dnsvalidator/resolvers_top25.txt

domainsfile=subdomains.txt
baseurlfile=baseurls.txt

mkdir $domain
cd $domain

datestamp=$(date +"%Y-%m-%d")
mkdir $datestamp
cd $datestamp

echo "Scanning $domain"

#assetfinder -subs-only $domain | sort -u | tee $domainsfile
subfinder -silent -nC -o $domainsfile -rL $DNS_RESOLVERS_FILE -d $domain
subfinder_count=$(wc -l $domainsfile | awk '{print  $1}')
echo "subfinder found $subfinder_count subdomain(s)"

amass enum -rf $DNS_RESOLVERS_FILE -max-dns-queries 20000 -d $domain -dir . -nolocaldb -noalts -nocolor -active | tee -a $domainsfile
cat $domainsfile | unfurl --unique domains | grep $domain > tmpfile
cat tmpfile > $domainsfile
rm tmpfile
amass_count=$(wc -l $domainsfile | awk '{print  $1}')

amass_count=$((amass_count-subfinder_count))
echo "amass found $amass_count new subdomains"

waybackrecon () {
        echo "Scraping wayback for data..."
        mkdir ./wayback-data/

        cat $baseurlfile | waybackurls > ./wayback-data/waybackurls.txt
        cat ./wayback-data/waybackurls.txt  | sort -u | unfurl --unique keys > ./wayback-data/paramlist.txt
        [ -s ./wayback-data/paramlist.txt ] && echo "Wordlist saved to /wayback-data/paramlist.txt"

        cat ./wayback-data/waybackurls.txt  | sort -u | grep -P "\w+\.js(\?|$)" | sort -u > ./wayback-data/jsurls.txt
        [ -s ./wayback-data/jsurls.txt ] && echo "JS Urls saved to /wayback-data/jsurls.txt"

        cat ./wayback-data/waybackurls.txt  | sort -u | grep -P "\w+\.php(\?|$) | sort -u " > ./wayback-data/phpurls.txt
        [ -s ./wayback-data/phpurls.txt ] && echo "PHP Urls saved to /wayback-data/phpurls.txt"

        cat ./wayback-data/waybackurls.txt  | sort -u | grep -P "\w+\.aspx(\?|$) | sort -u " > ./wayback-data/aspxurls.txt
        [ -s ./wayback-data/aspxurls.txt ] && echo "ASP Urls saved to /wayback-data/aspxurls.txt"

        cat ./wayback-data/waybackurls.txt  | sort -u | grep -P "\w+\.jsp(\?|$) | sort -u " > ./wayback-data/jspurls.txt
        [ -s ./wayback-data/jspurls.txt ] && echo "JSP Urls saved to /wayback-data/jspurls.txt"
}

if [[ $subs_only -eq 0 ]];
then
        shuffledns -d $domain -w /opt/pwntainer/lists/top20000.txt -r $DNS_RESOLVERS_FILE -strict-wildcard -silent -o shuffledns.txt
        cat shuffledns.txt | tee -a $domainsfile
        shuffledns_count=$(wc -l $domainsfile | awk '{print  $1}')
        shuffledns_count=$((shuffledns_count-amass_count-subfinder_count))
        echo "shuffledns found $shuffledns_count subdomains"

        dig_deep $domainsfile
        if ! [ -s all_records.txt ]
        then
                cat all_records.txt | awk '{print $4}' | tee -a $domainsfile
                sort_and_uniq $domainsfile
        fi

        cat $domainsfile | httpx -silent -ports 80,443,8080,8443 | tee -a $baseurlfile
        echo "$(wc -l $baseurlfile | awk '{print  $1}') web servers found."

        echo "Taking screenshots.."
        cat $baseurlfile | aquatone -chrome-path /usr/bin/chromium-browser -silent -threads=5 -screenshot-timeout 300000

        waybackrecon $domain
fi